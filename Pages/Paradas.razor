@page "/Paradas"

@using Microsoft.EntityFrameworkCore
@using System.Linq

@inject Turno turno;
@inject NavigationManager Navigation
@inject IDataTieParTp DataTieParTp;
@inject IDataAreAfect DataAreAfect;

@inject NotificationService NotificationService

<PageTitle>Tiempo Perdido</PageTitle>

<BSContainer PaddingBottom="Padding.Large">
    <BSRow>
        <h1 class="titulo">NEO</h1>
    </BSRow>
</BSContainer>


<br>
<br>

@if(cambio){
     <div class="rz-p-sm-12 rz-text-align-center">
        <RadzenDropDown AllowClear="true" @bind-Value=datoCambio AllowVirtualization="true" AllowFiltering="true" Data=@listaAreaAfectada TextProperty="Aanom" ValueProperty="IdAreAfect" Style="width: 100%; max-width: 400px;" />
        <RadzenButton Variant="Variant.Flat" Click=@(args => Listo()) Text="Registrar" ButtonStyle="ButtonStyle.Success"/>
    </div>
}



<div class="table">
    <RadzenDataGrid @ref="ordersGrid" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" AllowPaging="true" PageSize="5" AllowSorting="true" 
                Data="@orders" TItem="TieParTp" >
        <Columns>
            <RadzenDataGridColumn   Width="40px" TItem="TieParTp" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                <Template Context="data">
                    <RadzenText class="mb-0 tipografia">@(orders.IndexOf(data) + 1)</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="180px" TItem="TieParTp" Property="IdParsiOeeNavigation.IdAreaNavigation.IdAreaNavigation.Anom" Title="Area Detenida">
                <Template Context="order">
                    <RadzenText class="mb-0 tipografia">@order.IdParsiOeeNavigation.IdAreaNavigation.IdAreaNavigation.Anom - @order.IdParsiOeeNavigation.IdAreaNavigation.Lacodigo</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            @* <RadzenDataGridColumn Width="190px" TItem="TieParTp" Property="IdParaTpNavigation.IdTiParTpNavigation.Tpnombre" Title="Tipo de Parada">
                <Template Context="order ">
                    <RadzenText class="mb-0 tipografia">@order.IdParaTpNavigation.IdTiParTpNavigation.Tpnombre</RadzenText>
                </Template>
            </RadzenDataGridColumn> *@
            <RadzenDataGridColumn TItem="TieParTp" Property="IdParaTpNavigation.Pnombre" Title="Paradas">
                <Template Context="order">
                    <RadzenText class="mb-0 tipografia">@order.IdParaTpNavigation.Pnombre</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="100px" TItem="TieParTp" Property="Tefechai" Title="Inicio">
                <Template Context="order">
                    <RadzenText class="mb-0 tipografia">@order.Tefechai.ToString("HH:mm:ss")</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="100px"  TItem="TieParTp" Property="Tefechaf" Title="Final">
                <Template Context="order">
                    <RadzenText class="mb-0 tipografia">@order.Tefechaf?.ToString("HH:mm:ss")</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="100px" TItem="TieParTp" Property="Teduracion" Title="Duracion">
                <Template Context="order">
                    <RadzenText class="mb-0 tipografia">@Math.Round(order.Teduracion ?? 0) min</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn  TItem="TieParTp" Property="IdAreAfectNavigation.Aanom" Title="Area Afectada">
                <Template Context="order">
                    <RadzenText class="mb-0 tipografia">@order.IdAreAfectNavigation.Aanom</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="100px" TItem="TieParTp" Property="OrderID" Title="Editar">
                <Template Context="order"> 
                    <RadzenButton Variant="Variant.Outlined" Shade="Shade.Darker"  Text="Editar" ButtonStyle="ButtonStyle.Success"   Click=@(args => EditParada(order.IdTieParTp)) />
                    @* Click=@(args => OnClick("Success button ")) *@
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

@code{

    public RadzenDataGrid<TieParTp> ordersGrid {get; set;}
    public IList<TieParTp> orders {get; set;}
    public List<AreAfect> listaAreaAfectada {get; set;}
    public TurnoTp turnoTp {get; set;}
    public string estado {get; set;}
    public bool cambio {get; set;}
    public bool exito {get; set;}
    public int datoCambio {get; set;}
    public int idTieParTp {get; set;}

    protected override async Task OnInitializedAsync()
    {
        cambio = false;
        datoCambio = 0;

        idTieParTp = 0;
        turnoTp  = turno.turnoTp;
        orders = await DataTieParTp.ObtenerParadas(turnoTp.IdTurnoTp);
        listaAreaAfectada = await DataAreAfect.ObtenerTodasLasAreasAfectada();
    }

    protected async Task EditParada(int IdTieParTp)
    {
        idTieParTp = IdTieParTp;
        cambio = true;
    }
    protected async Task Listo()
    {
        if(datoCambio != 0){
            exito = await DataTieParTp.CambiarMotivoParada(idTieParTp,datoCambio);
            if(exito){
                Notificacion("exito","Guardado exitoso.","");
                datoCambio = 0;
                cambio = false;
            }else{
                Notificacion("error","Hubo un error. Intente de nuevo.","");
            }
        }else{
            datoCambio = 0;
            cambio = false;
        }
    }

    public void Notificacion(string tipo,string mensaje,string detalle)
    {

        NotificationMessage notificacion = new NotificationMessage{};
        if(tipo == "error"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = mensaje, Detail = detalle, Duration = 8000 };
        }else if(tipo == "info"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Info, Summary = mensaje, Detail = detalle, Duration = 8000 };
        }else if(tipo == "exito"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = mensaje, Detail = detalle, Duration = 8000 };
        }else if(tipo == "advertencia"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = mensaje, Detail = detalle, Duration = 8000 };
        }
        NotificationService.Notify(notificacion);
    } 
}
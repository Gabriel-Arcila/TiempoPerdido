@page "/Paradas"

@using Microsoft.EntityFrameworkCore
@using System.Linq

@inject Turno turno;
@inject NavigationManager Navigation
@inject IDataTieParTp DataTieParTp;
@inject IDataAreAfect DataAreAfect;

@inject IDataParaTp DataParaTp;
@inject IDataTiParTP DataTiParTP;

@inject NotificationService notificationService

<PageTitle>Tiempo Perdido</PageTitle>

<BSContainer PaddingBottom="Padding.Large">
    <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-0 rz-m-lg-0">
        <RadzenColumn  Size="6" SizeMD="6">
            <RadzenButton  Click=@(args => recargar()) Text="Recargar" Icon="refresh" ButtonStyle="ButtonStyle.Light" />
        </RadzenColumn>
    </RadzenRow>
</BSContainer>


<br>
<br>

@if(cambio){
    <RadzenStack Orientation="Orientation.Vertical" Gap="1rem" Class="rz-mb-6 rz-border-radius-1" Style="border: var(--rz-grid-cell-border);">
        <div class="rz-p-sm-12 rz-text-align-center">
            
                <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenFormField style="width: 80%;" Size="12" SizeMD="12" Text="Tipo de parada">
                            <RadzenDropDown Change="BuscarParadas" AllowClear="true" @bind-Value=idTiParTp AllowVirtualization="true" AllowFiltering="true" Data=@listaTipoParadas TextProperty="Tpnombre" ValueProperty="IdTiParTp" Style="width: 100%; max-width: 400px;" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenFormField style="width: 80%;" Size="12" SizeMD="12" Text="Parada">
                            <RadzenDropDown AllowClear="true" @bind-Value=idParada AllowVirtualization="true" AllowFiltering="true" Data=@listaParadas TextProperty="Pnombre" ValueProperty="IdParaTp" Style="width: 100%; max-width: 400px;" />
                        </RadzenFormField>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
                    <RadzenColumn Size="8" SizeMD="12">
                        <RadzenFormField style="width: 40%;" Size="12" SizeMD="12" Text="Area afectada">
                            <RadzenDropDown AllowClear="true" @bind-Value=idAreaAfectada AllowVirtualization="true" AllowFiltering="true" Data=@listaAreaAfectada TextProperty="Aanom" ValueProperty="IdAreAfect" Style="width: 100%; max-width: 400px;" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="4" SizeMD="12">
                        <RadzenButton class="buttonFormularioOK" Variant="Variant.Flat" Click=@(args => Listo()) Text="Registrar" ButtonStyle="ButtonStyle.Success"/>
                    </RadzenColumn>
                </RadzenRow>
        </div>
    </RadzenStack>
}



<div class="table">
    <RadzenDataGrid @ref="ordersGrid" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" AllowPaging="true" PageSize="5" AllowSorting="true" 
                Data="@orders" TItem="TieParTp" >
        <Columns>
            <RadzenDataGridColumn   Width="40px" TItem="TieParTp" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                <Template Context="data">
                    <RadzenText class="mb-0 tipografia">@(orders.IndexOf(data) + 1)</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="180px" TItem="TieParTp" Property="IdParsiOeeNavigation.IdAreaNavigation.IdAreaNavigation.Anom" Title="Area Detenida">
                <Template Context="order">
                    <RadzenText class="mb-0 tipografia">@order.IdParsiOeeNavigation.IdAreaNavigation.IdAreaNavigation.Anom - @order.IdParsiOeeNavigation.IdAreaNavigation.Lacodigo</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TieParTp" Property="IdParaTpNavigation.Pnombre" Title="Paradas">
                <Template Context="order">
                    <RadzenText class="mb-0 tipografia">@order.IdParaTpNavigation.Pnombre</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="100px" TItem="TieParTp" Property="Tefechai" Title="Inicio">
                <Template Context="order">
                    <RadzenText class="mb-0 tipografia">@order.Tefechai.ToString("HH:mm:ss")</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="100px"  TItem="TieParTp" Property="Tefechaf" Title="Final">
                <Template Context="order">
                    <RadzenText class="mb-0 tipografia">@order.Tefechaf?.ToString("HH:mm:ss")</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="100px" TItem="TieParTp" Property="Teduracion" Title="Duracion">
                <Template Context="order">
                    <RadzenText class="mb-0 tipografia">@Math.Round(order.Teduracion ?? 0) min</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn  TItem="TieParTp" Property="IdAreAfectNavigation.Aanom" Title="Area Afectada">
                <Template Context="order">
                    <RadzenText class="mb-0 tipografia">@order.IdAreAfectNavigation.Aanom</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="100px" TItem="TieParTp" Property="OrderID" Title="Editar">
                <Template Context="order"> 
                    <RadzenButton Variant="Variant.Outlined" Shade="Shade.Darker"  Text="Editar" ButtonStyle="ButtonStyle.Success"   Click=@(args => EditParada(order.IdTieParTp)) />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

@code{

    public RadzenDataGrid<TieParTp> ordersGrid {get; set;}
    public IList<TieParTp> orders {get; set;}
    public List<AreAfect> listaAreaAfectada {get; set;}
    public List<TiParTp> listaTipoParadas {get; set;}
    public List<ParaTp> listaParadas {get; set;}
    public TurnoTp turnoTp {get; set;}
    public string estado {get; set;}
    public bool cambio {get; set;}
    public bool exito {get; set;}
    public int idAreaAfectada {get; set;}
    public int idParada {get; set;}
    public int idTieParTp {get; set;}
    public int idTiParTp {get; set;}
    protected override async Task OnInitializedAsync()
    {
        if(turno.turnoTp == null){
            Navigation.NavigateTo("");
        }else{
            cambio = false;
            idAreaAfectada = 0;

            idTieParTp = 0;
            turnoTp  = turno.turnoTp;
            orders = await DataTieParTp.ObtenerParadas(turnoTp.IdTurnoTp);
            listaTipoParadas = await DataTiParTP.ObtenerTiposDeParada();
            listaAreaAfectada = await DataAreAfect.ObtenerTodasLasAreasAfectada();
        }
        
    }

    public async Task recargar()
    {
        orders = await DataTieParTp.ObtenerParadas(turnoTp.IdTurnoTp);
    }

    protected void EditParada(int IdTieParTp)
    {
        idTieParTp = IdTieParTp;
        cambio = true;
    }
    public async Task BuscarParadas(){
        listaParadas = await DataParaTp.ObtenerLasParadasPorTipoParada(idTiParTp);
    }
    protected async Task Listo()
    {
        if(idAreaAfectada != 0){
            exito = await DataTieParTp.CambiarMotivoParada(idTieParTp,idAreaAfectada,idParada);
            if(exito){
                orders = await DataTieParTp.ObtenerParadas(turnoTp.IdTurnoTp);
                Notificacion("exito","Guardado exitosamente.","");
                idAreaAfectada = 0;
                idTiParTp = 0;
                idParada = 0;
                cambio = false;
            }else{
                Notificacion("error","Hubo un error. Intente de nuevo.","");
            }
        }else{
            idAreaAfectada = 0;
            idTiParTp = 0;
            idParada = 0;
            cambio = false;
        }
    }

    public void Notificacion(string tipo,string mensaje,string detalle)
    {

        NotificationMessage notificacion;
        if(tipo == "error"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = mensaje, Detail = detalle, Duration = 8000 };
            notificationService.Notify(notificacion);
        }else if(tipo == "info"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Info, Summary = mensaje, Detail = detalle, Duration = 8000 };
            notificationService.Notify(notificacion);
        }else if(tipo == "exito"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = mensaje, Detail = detalle, Duration = 8000 };
            notificationService.Notify(notificacion);
        }else if(tipo == "advertencia"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = mensaje, Detail = detalle, Duration = 8000 };
            notificationService.Notify(notificacion);
        }
    } 
}
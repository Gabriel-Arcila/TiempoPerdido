@page "/"
@inject NavigationManager Navigation
@inject IDataOperador DataOperador;
@inject IDataTurnoTp DataTurnoTp;
@inject IDataDivision DataDivision;
@inject IDataLinea DataLinea;
@inject IDataAPI DataAPI;
@inject Turno turno;

<PageTitle>Tiempo Perdido</PageTitle>

@* <BSContainer PaddingBottom="Padding.Large">
    <BSRow>
        <h1 class="titulo">NEO</h1>
    </BSRow>
</BSContainer> *@

<BSCard CardType="CardType.Card" MarginBottom="Margins.Large">
    <BSCard CardType="CardType.Body">
        <BSCard CardType="CardType.Text">
            <section id="cajaPadre">
                <BSForm class="cajaContenido" Model="usuarioTurno" IsRow="true" Gutters="Gutters.Medium" OnSubmit="OK">
                    <DataAnnotationsValidator />
                    <section class="cajaContenido">
                        <section class="cajaimghome">
                            <BSButton IsSubmit="true" IsDisabled="@isDisabled"  id="link_on">
                                <BSImage Source="img/Neo.png" />
                                <h1 id="ontext">Iniciar Turno</h1>
                            </BSButton>
                        </section>
                    </section>
                    <section class="cajaFormulario">
                        <div class="juntoInput">
                            <BSCol Position="Position.Relative" Place ColumnMedium="4">
                                <BSLabel class="labelFormulario">Linea</BSLabel>
                                <BSInput InputType="InputType.Select"  rows="1" @onchange=BucarProducto @bind-Value="usuarioTurno.idLinea">
                                    <option value="0">Seleccione</option>
                                    @if(listaLinea != null){
                                            @foreach (var item in listaLinea)
                                            {
                                                <option value="@item.IdLinea">@item.Lnom</option>
                                            }
                                    }else{
                                        <option value="0">Cargando...</option>
                                    }
                                </BSInput> 
                                <BSFeedback For="@(() => usuarioTurno.idLinea)"/> 
                                
                            </BSCol>

                            <BSCol Position="Position.Relative" Place ColumnMedium="4">
                            <BSLabel class="labelFormulario">Producto</BSLabel>
                            <BSInput InputType="InputType.Select" rows="1"  @bind-Value="usuarioTurno.productos">
                                @if(listaDeProductos != null){
                                        <option value="0">Seleccione</option>
                                        @foreach (var item in listaDeProductos)
                                        {
                                            <option value="@item.Key">@item.Value</option>
                                        }
                                }else{
                                    <option value="0">Cargando...</option>
                                }
                            </BSInput> 
                            <BSFeedback For="@(() => usuarioTurno.productos)"/> 
                            
                        </BSCol>
                        </div>

                        <BSCol Position="Position.Relative" Place ColumnMedium="4">
                            <BSLabel class="labelFormulario">Ficha</BSLabel>
                            <BSInput InputType="InputType.Text" rows="1"  @bind-Value="usuarioTurno.ficha"/>
                            <BSFeedback For="@(() => usuarioTurno.ficha)"/> 
                        </BSCol>
                    </section>
                </BSForm>
            </section>
        </BSCard>
    </BSCard>
</BSCard>

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    [CascadingParameter] 
    public TurnoTp turnoTp {get; set;}

    private bool isDisabled { get; set; }
    private string info { get; set; }
    private int idDivision { get; set; }
    private Operador operador { get; set; }
    private TurnoTp turnoActual { get; set; }
    private bool isOk { get; set; }
    private List<Linea> listaLinea  { get; set; }
    private Dictionary<string, string> listaDeProductos {get; set;}
    private UsuarioTurno usuarioTurno {get; set;}
    private bool isActulizacion { get; set; }

    
    protected override async Task  OnInitializedAsync()
    {
        usuarioTurno = new UsuarioTurno();
        operador = new Operador();
        isDisabled = false;
        info = "Inicie Turno";
        if (authenticationState is not null)
        {
            AuthenticationState? authState = await authenticationState;
            ClaimsPrincipal? user = authState?.User;
            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                idDivision = int.Parse(user.FindFirst(c => c.Type == "IdDivision")?.Value ?? "0") ;
                listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);
            }
        }
    }

    protected async Task BucarProducto(ChangeEventArgs e){
        listaDeProductos = null;
        usuarioTurno.idLinea = int.Parse(e.Value.ToString());
        if(usuarioTurno.idLinea != 0){
            string centroCosto  = listaLinea.Where(l => l.IdLinea == usuarioTurno.idLinea).First().LcenCos ?? "0";
            listaDeProductos = await DataAPI.ObtenerProductosActualesConOrdenesAbiertas(centroCosto) ?? new Dictionary<string, string>() ;
        }
    }

    protected async Task OK(EditContext e){
        if (e.Validate())
        {
            isDisabled = true;
            usuarioTurno.ficha = usuarioTurno.ficha.ToUpper().Trim();
            Dictionary<string, string> data = await DataAPI.obtenerUsuario(usuarioTurno.ficha);
            DateTime hoy = DateTime.Now.Date;
            if(data["nombre"] != null){
                turnoTp = await DataTurnoTp.TurnoActual(usuarioTurno.idLinea);
                turnoTp.ToperaFich = usuarioTurno.ficha;
                turnoTp.TcodiProdu = usuarioTurno.productos;
                
                if(turnoTp != null){
                    isActulizacion = await DataTurnoTp.ActulizarTurno(turnoTp);
                    if(isActulizacion){
                        turnoTp = await DataTurnoTp.TurnoActual(usuarioTurno.idLinea);
                        turno.turnoTp = turnoTp;
                        Navigation.NavigateTo("Paradas");
                    }else{
                        info = "Error al actulizar el turno. Intente de nuevo.";
                    }
                }else{
                    info = "Error al consultar el turno. Intente de nuevo.";
                }
            }else{
                usuarioTurno.ficha = "";
                info = "Ficha Invalida";
            }
            isDisabled = false;
        }
    }
}
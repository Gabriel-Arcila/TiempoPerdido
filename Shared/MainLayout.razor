@* @inherits LayoutComponentBase

<PageTitle>TiempoPerdido</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div> *@

@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject UsuarioServices usuarioServices
@implements IDisposable
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<PageTitle>Neo</PageTitle>

<div class="page">
    @* <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            @if(usuarioServices.login){
                <BSButton Color="BSColor.Success" IsOutlined="true"  @onclick="logout">Logout</BSButton>
            }
        </div> *@
        <AuthorizeView>
            <Authorized>
                <div class="sidebar">
                    <NavMenu />
                </div>
                <main>
                    <div class="top-row px-4">
                        <LoginLogoutButton />
                    </div>
                    <article class="content px-4">
                        @Body
                    </article>
                </main>
            </Authorized>
            <NotAuthorized>
                <main>
                    <div class="text-center fondo">
                        <div class="form-signin w-25 m-auto loginform ">
                            <img class="mb-4" id="logoLogin" src="./img/Neo.png" >
                            <h1 class="h3 mb-3 fw-normal">Inicie Sesión</h1>
                            <BSForm Model="user"   OnSubmit="HandleLogin">
                                @* <DataAnnotationsValidator /> *@
                                <div class="form-floating">
                                <BSLabel IsHidden="true">User</BSLabel>
                                    <BSInput InputType="InputType.Text" placeholder="Ficha/Usuario"  @bind-Value="user.UserName"/>
                                    @* <BSFeedback For="@(() => user.UserName)" ValidMessage="Correcto." /> *@
                                </div>
                                <div class="form-floating">
                                        <BSLabel IsHidden="true">Password</BSLabel>
                                    <BSInput InputType="InputType.Password" @bind-Value="user.Password"/>
                                    @* <BSFeedback For="@(() => user.Password)" ValidMessage="Correcto." /> *@
                                </div>
                                <BSButton   Class="w-100 btn btn-lg" Color="BSColor.Success"  Size="Size.ExtraExtraLarge" IsSubmit>  Iniciar</BSButton>
                                <p class="mt-5 mb-3 text-muted">Neo 2022</p>
                            </BSForm>
                        </div>
                    </div>
                </main>
            </NotAuthorized>
        </AuthorizeView>
</div>
@code{
    UserLoginDto user = new UserLoginDto();

    protected void logout(){
        usuarioServices.logout();
        NavigationManager.NavigateTo("acceso");
    }

    protected async Task HandleLogin(EditContext e)
    {
        user.Proyecto = "TiempoPerdido";
        if (e.Validate())
        {
            @* var result = await Http.PostAsJsonAsync("http://operaciones.papeleslatinos.com/Authentication/api/Auth/Login", user);
            var ValidarToken = await result.Content.ReadAsStringAsync(); *@
            var ValidarToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJoaSI6ImhpIiwiaGkyIjoiaGkyIn0.CedXpV1yqmBSf76LSFQaDIGekRv_GNFfzODJZSL0src";
            if (ValidarToken != null)
            {
                if (ValidarToken == "NotFoundUser")
                {

                }
                else if (ValidarToken == "WrongPassword")
                {

                }
                else if (ValidarToken == "null")
                {

                }
                else
                {
                    Console.WriteLine(ValidarToken);
                    await LocalStorage.SetItemAsync("TiempoPerdido", ValidarToken);
                    await AuthStateProvider.GetAuthenticationStateAsync();
                    user = new UserLoginDto();
                    NavigationManager.NavigateTo("");
                }
            }
        }  
    }

    public void Dispose()
    {
        if(usuarioServices.login){
            usuarioServices.Onchange -= StateHasChanged;
        }
    }
}
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TiempoPerdido.Models;

#nullable disable

namespace TiempoPerdido.Migrations
{
    [DbContext(typeof(DbNeoContext))]
    [Migration("20221215230944_Migration_idCausa_De_La_Parada")]
    partial class MigrationidCausaDeLaParada
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TiempoPerdido.Models.Area", b =>
                {
                    b.Property<int>("IdArea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("identificador del area");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdArea"));

                    b.Property<string>("Adetalle")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("ADetalle")
                        .HasComment("Detalle del area");

                    b.Property<bool>("Aestado")
                        .HasColumnType("bit")
                        .HasColumnName("AEstado")
                        .HasComment("0: Inactivo, 1:Activo");

                    b.Property<string>("Anom")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ANom")
                        .HasComment("nombre del area");

                    b.HasKey("IdArea");

                    b.ToTable("Area", null, t =>
                        {
                            t.HasComment("Area de produccion");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.AreaTra", b =>
                {
                    b.Property<int>("IdAreaTra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAreaTra"));

                    b.Property<int?>("AtcodBpc")
                        .HasColumnType("int")
                        .HasColumnName("ATCodBPC");

                    b.Property<string>("Atcodigo")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("ATCodigo");

                    b.Property<bool?>("Atestado")
                        .HasColumnType("bit")
                        .HasColumnName("ATEstado");

                    b.Property<string>("Atnombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ATNombre");

                    b.Property<int?>("IdPlanta")
                        .HasColumnType("int");

                    b.HasKey("IdAreaTra")
                        .HasName("PK__AreaTra__487F56B804138E4C");

                    b.HasIndex("IdPlanta");

                    b.ToTable("AreaTra", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.AsisPm", b =>
                {
                    b.Property<int>("IdAsisPm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdAsisPM")
                        .HasComment("identificador");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAsisPm"));

                    b.Property<bool>("AisAsis")
                        .HasColumnType("bit")
                        .HasColumnName("AIsAsis")
                        .HasComment("1: Asistencia, 0: Inasistencia");

                    b.Property<int>("IdCargoPm")
                        .HasColumnType("int")
                        .HasColumnName("IdCargoPM")
                        .HasComment("identificador  CargoPM");

                    b.Property<int>("IdReuParM")
                        .HasColumnType("int")
                        .HasComment("identificador ReuParM");

                    b.HasKey("IdAsisPm");

                    b.HasIndex("IdCargoPm");

                    b.HasIndex("IdReuParM");

                    b.ToTable("AsisPM", null, t =>
                        {
                            t.HasComment("reuniones de paradas por mantenimiento");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.AsistenReu", b =>
                {
                    b.Property<int>("IdAsistencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAsistencia"));

                    b.Property<int>("ArAsistente")
                        .HasColumnType("int");

                    b.Property<string>("ArObser")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ararea")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ARArea");

                    b.Property<DateTime?>("Arfecha")
                        .HasColumnType("date")
                        .HasColumnName("ARFecha");

                    b.Property<int>("AridCargoR")
                        .HasColumnType("int")
                        .HasColumnName("ARIdCargoR");

                    b.HasKey("IdAsistencia");

                    b.HasIndex("AridCargoR");

                    b.ToTable("AsistenReu", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.AudCa", b =>
                {
                    b.Property<int>("IdAudCa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador de la auditoria de calidad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAudCa"));

                    b.Property<string>("AccodiPro")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ACCodiPro")
                        .HasComment("codigo del producto");

                    b.Property<DateTime>("Acfecha")
                        .HasColumnType("datetime")
                        .HasColumnName("ACFecha")
                        .HasComment("fecha de la auditoria");

                    b.Property<string>("AcficOper")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ACFicOper")
                        .HasComment("ficha del operador");

                    b.Property<string>("AcficSuper")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ACFicSuper")
                        .HasComment("ficha del supervisor");

                    b.Property<string>("Acgrupo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("ACGrupo")
                        .HasComment("grupo de la auditoria");

                    b.Property<bool>("AcisCamPro")
                        .HasColumnType("bit")
                        .HasColumnName("ACisCamPro")
                        .HasComment("0: No es un cambio de producto; 1: cambio de producto");

                    b.Property<bool>("AcisTecn")
                        .HasColumnType("bit")
                        .HasColumnName("ACisTecn")
                        .HasComment("0: auditoria operador, 1: tecnico de calidad");

                    b.Property<string>("Aclote")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ACLote")
                        .HasComment("lote del producto");

                    b.Property<string>("Acobserv")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ACObserv")
                        .HasComment("observaciones dispuestas en la auditoria");

                    b.Property<string>("Acpresentacion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ACPresentacion")
                        .HasComment("presentacion del producto");

                    b.Property<string>("Acturno")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("ACTurno")
                        .HasComment("turno de la aditoria");

                    b.Property<int>("IdArea")
                        .HasColumnType("int")
                        .HasComment("identificador del area");

                    b.Property<int>("IdTecniCa")
                        .HasColumnType("int")
                        .HasComment("identificador del tecnico");

                    b.HasKey("IdAudCa");

                    b.HasIndex("IdArea");

                    b.HasIndex("IdTecniCa");

                    b.ToTable("AudCa", "his", t =>
                        {
                            t.HasComment("historico de auditorias de calidad");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.AutenUsr", b =>
                {
                    b.Property<int>("IdAuten")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAuten"));

                    b.Property<string>("Aapellido")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AApellido");

                    b.Property<bool?>("Aestatus")
                        .HasColumnType("bit")
                        .HasColumnName("AEstatus");

                    b.Property<int?>("Anivel")
                        .HasColumnType("int")
                        .HasColumnName("ANivel");

                    b.Property<string>("Anombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ANombre");

                    b.Property<string>("AuFicha")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AuPass")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdAuten");

                    b.ToTable("AutenUsr", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.CargoPm", b =>
                {
                    b.Property<int>("IdCargoPm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdCargoPM")
                        .HasComment("identificador");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCargoPm"));

                    b.Property<string>("Cpmnom")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CPMNom")
                        .HasComment("cargo del asistidor");

                    b.HasKey("IdCargoPm");

                    b.ToTable("CargoPM", null, t =>
                        {
                            t.HasComment("cargos registrados en las reuniones de las paradas por mantenimiento");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.CargoReu", b =>
                {
                    b.Property<int>("IdCargoR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCargoR"));

                    b.Property<string>("Cearea")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CEArea");

                    b.Property<string>("Crempresa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREmpresa");

                    b.Property<bool>("Cresta")
                        .HasColumnType("bit")
                        .HasColumnName("CREsta");

                    b.Property<string>("Crnombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CRNombre");

                    b.HasKey("IdCargoR");

                    b.ToTable("CargoReu", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.Centro", b =>
                {
                    b.Property<int>("IdCentro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("identificador del centro");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCentro"));

                    b.Property<string>("Cdetalle")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("CDetalle")
                        .HasComment("Detalle del centro");

                    b.Property<bool>("Cestado")
                        .HasColumnType("bit")
                        .HasColumnName("CEstado")
                        .HasComment("0: Inactivo, 1:Activo");

                    b.Property<string>("Cnom")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CNom")
                        .HasComment("nombre del centro");

                    b.Property<int?>("IdEmpresa")
                        .HasColumnType("int");

                    b.HasKey("IdCentro");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("Centro", null, t =>
                        {
                            t.HasComment("centro de produccion");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.ClasifiTpm", b =>
                {
                    b.Property<int>("IdCtpm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdCTPM");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCtpm"));

                    b.Property<bool>("Ctpmestado")
                        .HasColumnType("bit")
                        .HasColumnName("CTPMEstado");

                    b.Property<string>("Ctpmnom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CTPMNom");

                    b.HasKey("IdCtpm");

                    b.ToTable("ClasifiTPM", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.ClienteP", b =>
                {
                    b.Property<int>("IdClienteP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador del cliente del proyecto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClienteP"));

                    b.Property<string>("Cpdescri")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CPDescri")
                        .HasComment("decripcion del area");

                    b.Property<bool>("Cpestatus")
                        .HasColumnType("bit")
                        .HasColumnName("CPEstatus")
                        .HasComment("estatus(0:inactivo,1:activo)");

                    b.Property<string>("Cpnombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CPNombre")
                        .HasComment("nombre del area");

                    b.HasKey("IdClienteP");

                    b.ToTable("ClienteP", null, t =>
                        {
                            t.HasComment("Area solicitante");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.DatAudCa", b =>
                {
                    b.Property<int>("IdDatAudCa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador del dato");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDatAudCa"));

                    b.Property<bool?>("DacisAcep")
                        .HasColumnType("bit")
                        .HasColumnName("DACIsAcep")
                        .HasComment("0: no aceptable, 1:aceptable");

                    b.Property<double>("Dacvalor")
                        .HasColumnType("float")
                        .HasColumnName("DACValor")
                        .HasComment("valor observado");

                    b.Property<int>("IdAudCa")
                        .HasColumnType("int")
                        .HasComment("identificador de la auditoria");

                    b.Property<int>("IdVarCa")
                        .HasColumnType("int")
                        .HasComment("identificador de la variable");

                    b.HasKey("IdDatAudCa");

                    b.HasIndex("IdAudCa");

                    b.HasIndex("IdVarCa");

                    b.ToTable("DatAudCa", null, t =>
                        {
                            t.HasComment("data de la auditoria");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.Division", b =>
                {
                    b.Property<int>("IdDivision")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDivision"));

                    b.Property<string>("Ddetalle")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DDetalle");

                    b.Property<bool?>("Destado")
                        .HasColumnType("bit")
                        .HasColumnName("DEstado");

                    b.Property<string>("Dnombre")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DNombre");

                    b.Property<int?>("IdCentro")
                        .HasColumnType("int");

                    b.HasKey("IdDivision");

                    b.HasIndex("IdCentro");

                    b.ToTable("Division", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.Empresa", b =>
                {
                    b.Property<int>("IdEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEmpresa"));

                    b.Property<string>("Edescri")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("EDescri");

                    b.Property<bool>("Eestado")
                        .HasColumnType("bit")
                        .HasColumnName("EEstado");

                    b.Property<string>("Enombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ENombre");

                    b.Property<int>("IdPais")
                        .HasColumnType("int");

                    b.HasKey("IdEmpresa");

                    b.HasIndex("IdPais");

                    b.ToTable("Empresa", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.IdAreaConLinea", b =>
                {
                    b.Property<string>("Anom")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ANom");

                    b.Property<int>("IdArea")
                        .HasColumnType("int");

                    b.Property<int>("IdLinAre")
                        .HasColumnType("int");

                    b.Property<int>("IdLinea")
                        .HasColumnType("int");

                    b.Property<string>("Lnom")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("LNom");

                    b.ToTable((string)null);

                    b.ToView("IdAreaConLinea", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.Ksf", b =>
                {
                    b.Property<int>("Idksf")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idksf"));

                    b.Property<bool>("KsfEsta")
                        .HasColumnType("bit");

                    b.Property<string>("KsfNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Idksf");

                    b.ToTable("KSF", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.LibroNove", b =>
                {
                    b.Property<int>("IdlibrNov")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdlibrNov"));

                    b.Property<int>("IdAreaCar")
                        .HasColumnType("int");

                    b.Property<int?>("IdCtpm")
                        .HasColumnType("int")
                        .HasColumnName("IdCTPM");

                    b.Property<string>("IdEquipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdLinea")
                        .HasColumnType("int");

                    b.Property<string>("IdMaquina")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IdParada")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdTipoNove")
                        .HasColumnType("int");

                    b.Property<string>("Lndiscrepa")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("LNDiscrepa");

                    b.Property<DateTime>("Lnfecha")
                        .HasColumnType("datetime")
                        .HasColumnName("LNFecha");

                    b.Property<string>("LnfichaRes")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LNFichaRes");

                    b.Property<string>("Lngrupo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("LNGrupo");

                    b.Property<bool>("LnisPizUni")
                        .HasColumnType("bit")
                        .HasColumnName("LNIsPizUni");

                    b.Property<int?>("LnisResu")
                        .HasColumnType("int")
                        .HasColumnName("LNIsResu");

                    b.Property<string>("Lnobserv")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("LNObserv");

                    b.Property<double>("LntiePerMi")
                        .HasColumnType("float")
                        .HasColumnName("LNTiePerMi");

                    b.Property<string>("Lnturno")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("LNTurno");

                    b.HasKey("IdlibrNov")
                        .HasName("PK_LibroNovedades");

                    b.HasIndex("IdAreaCar");

                    b.HasIndex("IdCtpm");

                    b.HasIndex("IdLinea");

                    b.HasIndex("IdTipoNove");

                    b.ToTable("LibroNove", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.LinAre", b =>
                {
                    b.Property<int>("IdLinAre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLinAre"));

                    b.Property<int>("IdArea")
                        .HasColumnType("int");

                    b.Property<int>("IdLinea")
                        .HasColumnType("int")
                        .HasComment("Codigo de la linea con area");

                    b.Property<string>("Lacodigo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LACodigo")
                        .HasComment("Codigo de la linea con area");

                    b.HasKey("IdLinAre");

                    b.HasIndex("IdArea");

                    b.HasIndex("IdLinea");

                    b.ToTable("LinAre", null, t =>
                        {
                            t.HasComment("ntermediario entre linea y area");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.LinPro", b =>
                {
                    b.Property<int>("IdLinPro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("identificador de la Lin_Pro");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLinPro"));

                    b.Property<int>("IdLinea")
                        .HasColumnType("int")
                        .HasComment("identificador de la linea");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int")
                        .HasComment("identificador del producto");

                    b.HasKey("IdLinPro");

                    b.HasIndex("IdLinea");

                    b.HasIndex("IdProducto");

                    b.ToTable("LinPro", null, t =>
                        {
                            t.HasComment("intermediario entre linea y producto");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.Linea", b =>
                {
                    b.Property<int>("IdLinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("identificador de la linea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLinea"));

                    b.Property<int>("IdCentro")
                        .HasColumnType("int")
                        .HasComment("identificador del centro");

                    b.Property<int?>("IdDivision")
                        .HasColumnType("int");

                    b.Property<string>("LcenCos")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LCenCos");

                    b.Property<string>("Ldetalle")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("LDetalle")
                        .HasComment("Detalle de la linea");

                    b.Property<bool>("Lestado")
                        .HasColumnType("bit")
                        .HasColumnName("LEstado")
                        .HasComment("0: Inactivo, 1:Activo");

                    b.Property<string>("Lnom")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("LNom")
                        .HasComment("nombre de la linea");

                    b.Property<string>("Lofic")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LOFIC");

                    b.HasKey("IdLinea");

                    b.HasIndex("IdCentro");

                    b.HasIndex("IdDivision");

                    b.ToTable("Linea", null, t =>
                        {
                            t.HasComment("linea de produccion");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.Nivel", b =>
                {
                    b.Property<int>("IdNivel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNivel"));

                    b.Property<int?>("IdDivision")
                        .HasColumnType("int");

                    b.Property<int>("IdProyecto")
                        .HasColumnType("int");

                    b.Property<int?>("IdRol")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.HasKey("IdNivel");

                    b.HasIndex("IdDivision");

                    b.HasIndex("IdProyecto");

                    b.HasIndex("IdRol");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Nivel", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.NovedadesActualesChempro", b =>
                {
                    b.Property<string>("Centro")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CodigoEquipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Codigo Equipo");

                    b.Property<string>("Discrepancia")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FichaDelRegistrador")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Ficha del Registrador");

                    b.Property<string>("Grupo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("Linea")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("Lnfecha")
                        .HasColumnType("datetime")
                        .HasColumnName("LNFecha");

                    b.Property<string>("Observacion")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<double>("TiempoPerdido")
                        .HasColumnType("float")
                        .HasColumnName("Tiempo Perdido");

                    b.Property<string>("TipoDeNovedad")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Tipo de Novedad");

                    b.Property<string>("Turno")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.ToTable((string)null);

                    b.ToView("NovedadesActualesChempro", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.Operador", b =>
                {
                    b.Property<int>("IdOperador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("identificador");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOperador"));

                    b.Property<string>("Opapellido")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("OPApellido")
                        .HasComment("apellido del operador		");

                    b.Property<bool>("Opestado")
                        .HasColumnType("bit")
                        .HasColumnName("OPEstado")
                        .HasComment("0: Inactivo, 1:Activo		");

                    b.Property<DateTime?>("OpfechaIng")
                        .HasColumnType("date")
                        .HasColumnName("OPFechaIng")
                        .HasComment("fecha de ingreso		");

                    b.Property<DateTime?>("OpfechaNac")
                        .HasColumnType("date")
                        .HasColumnName("OPFechaNac")
                        .HasComment("fecha de nacimiento		");

                    b.Property<string>("Opficha")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("OPFicha")
                        .HasComment("ficha del operador");

                    b.Property<string>("Opnombre")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("OPNombre")
                        .HasComment("nombre del operador		");

                    b.HasKey("IdOperador");

                    b.ToTable("Operador", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.Pai", b =>
                {
                    b.Property<int>("IdPais")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPais"));

                    b.Property<bool>("Pestado")
                        .HasColumnType("bit")
                        .HasColumnName("PEstado");

                    b.Property<string>("Pnombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PNombre");

                    b.HasKey("IdPais");

                    b.ToTable("Pais");
                });

            modelBuilder.Entity("TiempoPerdido.Models.ParAre", b =>
                {
                    b.Property<int>("IdParAre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("identificador del Par_Are");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdParAre"));

                    b.Property<int>("IdArea")
                        .HasColumnType("int")
                        .HasComment("identificador del area");

                    b.Property<int>("IdParte")
                        .HasColumnType("int")
                        .HasComment("identifiacador de la parte");

                    b.Property<string>("Pacodigo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PACodigo")
                        .HasComment("codigo de la parte correspondiente al area		");

                    b.HasKey("IdParAre");

                    b.HasIndex("IdArea");

                    b.HasIndex("IdParte");

                    b.ToTable("ParAre", null, t =>
                        {
                            t.HasComment("intermediario entre la parte y el area");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.ParaTp", b =>
                {
                    b.Property<int>("IdParaTp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdParaTP")
                        .HasComment("identificador de la parada");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdParaTp"));

                    b.Property<int>("IdTiParTp")
                        .HasColumnType("int")
                        .HasColumnName("IdTiParTP")
                        .HasComment("identificador del tipo de la parada");

                    b.Property<string>("Pcodigo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PCodigo")
                        .HasComment("codigo de la parada");

                    b.Property<bool>("Pestado")
                        .HasColumnType("bit")
                        .HasColumnName("PEstado")
                        .HasComment("0: Inactivo, 1:Activo");

                    b.Property<string>("Pnombre")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("PNombre")
                        .HasComment("nombre de la parada");

                    b.HasKey("IdParaTp");

                    b.HasIndex("IdTiParTp");

                    b.ToTable("ParaTP", null, t =>
                        {
                            t.HasComment("Paradas de la linia");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.ParsiOee", b =>
                {
                    b.Property<int>("IdParsiOee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdParsiOEE")
                        .HasComment("identificador del turno");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdParsiOee"));

                    b.Property<int>("IdArea")
                        .HasColumnType("int")
                        .HasComment("identificador de la linea");

                    b.Property<int>("IdTurnoTp")
                        .HasColumnType("int")
                        .HasColumnName("IdTurnoTP")
                        .HasComment("identificador del turno en curso");

                    b.Property<double?>("Pcalidad")
                        .HasColumnType("float")
                        .HasColumnName("PCalidad")
                        .HasComment("calidad del turno");

                    b.Property<double?>("Pdispo")
                        .HasColumnType("float")
                        .HasColumnName("PDispo")
                        .HasComment("disponibilidad del turno");

                    b.Property<double?>("Poee")
                        .HasColumnType("float")
                        .HasColumnName("POEE")
                        .HasComment("OEE del turno");

                    b.Property<int?>("Ppbueno")
                        .HasColumnType("int")
                        .HasColumnName("PPBueno")
                        .HasComment("productos buenos del turno");

                    b.Property<double?>("Pperdido")
                        .HasColumnType("float")
                        .HasColumnName("PPerdido")
                        .HasComment("tiempo perdido del turno");

                    b.Property<int?>("Ppmalo")
                        .HasColumnType("int")
                        .HasColumnName("PPMalo")
                        .HasComment("productos malos del turno");

                    b.Property<double?>("Prendi")
                        .HasColumnType("float")
                        .HasColumnName("PRendi")
                        .HasComment("rendimiento del turno");

                    b.Property<double?>("Ptrabajado")
                        .HasColumnType("float")
                        .HasColumnName("PTrabajado")
                        .HasComment("tiempo trabajo del turno");

                    b.Property<double?>("Pvelocidad")
                        .HasColumnType("float")
                        .HasColumnName("PVelocidad")
                        .HasComment("velocidad promedio del turno");

                    b.HasKey("IdParsiOee");

                    b.HasIndex("IdArea");

                    b.HasIndex("IdTurnoTp");

                    b.ToTable("ParsiOEE", "his", t =>
                        {
                            t.HasComment("datos obteneidos de un area especifico del turno en curso");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.Parte", b =>
                {
                    b.Property<int>("IdParte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("identificador");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdParte"));

                    b.Property<string>("Pdetalle")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("PDetalle")
                        .HasComment("detalle de la parte");

                    b.Property<bool>("Pestado")
                        .HasColumnType("bit")
                        .HasColumnName("PEstado")
                        .HasComment("0: Inactivo, 1:Activo");

                    b.Property<string>("Pnombre")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("PNombre")
                        .HasComment("nombre de la parte");

                    b.HasKey("IdParte");

                    b.ToTable("Parte", null, t =>
                        {
                            t.HasComment("Partes que componen el area");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.ParteLineaAreaCentro", b =>
                {
                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Centro")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CodigoDelArea")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Codigo del Area");

                    b.Property<string>("CodigocDeLaParte")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Codigoc de la Parte");

                    b.Property<string>("Linea")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Parte")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.ToTable((string)null);

                    b.ToView("ParteLineaAreaCentro", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.Personal", b =>
                {
                    b.Property<int>("IdPersonal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPersonal"));

                    b.Property<int?>("IdAreaTra")
                        .HasColumnType("int");

                    b.Property<int?>("IdPuesto")
                        .HasColumnType("int");

                    b.Property<string>("PeApellido")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PeEstado")
                        .HasColumnType("bit");

                    b.Property<string>("PeFicha")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("PeNombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdPersonal")
                        .HasName("PK__Personal__05A9201B1DEC2386");

                    b.HasIndex("IdAreaTra");

                    b.HasIndex("IdPuesto");

                    b.ToTable("Personal", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.Plantum", b =>
                {
                    b.Property<int>("IdPlanta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlanta"));

                    b.Property<string>("PlCodigo")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("PlDescri")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<bool?>("PlEstado")
                        .HasColumnType("bit");

                    b.HasKey("IdPlanta")
                        .HasName("PK__Planta__12FEC124F71E3A67");

                    b.ToTable("Planta");
                });

            modelBuilder.Entity("TiempoPerdido.Models.PregP", b =>
                {
                    b.Property<int>("IdPregP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("identificador de la pregunta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPregP"));

                    b.Property<bool>("Ppestatus")
                        .HasColumnType("bit")
                        .HasColumnName("PPEstatus")
                        .HasComment("estatus(0:inactivo,1:activo)");

                    b.Property<bool>("PpisObser")
                        .HasColumnType("bit")
                        .HasColumnName("PPIsObser")
                        .HasComment("(0:no tiene observacion,1: tiene observacion)");

                    b.Property<string>("Ppnombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("PPNombre")
                        .HasComment("pregunta de la encuesta");

                    b.HasKey("IdPregP");

                    b.ToTable("PregP", null, t =>
                        {
                            t.HasComment("preguntas de satisfaccion");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.Producto", b =>
                {
                    b.Property<int>("IdProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("identificador");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProducto"));

                    b.Property<string>("Pcodigo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PCodigo")
                        .HasComment("Codigo del producto");

                    b.Property<string>("Pdetalle")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("PDetalle")
                        .HasComment("detalle de la parte");

                    b.Property<bool>("Pestado")
                        .HasColumnType("bit")
                        .HasColumnName("PEstado")
                        .HasComment("0: Inactivo, 1:Activo");

                    b.Property<string>("Pnombre")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("PNombre")
                        .HasComment("nombre de la parte");

                    b.HasKey("IdProducto");

                    b.ToTable("Producto", null, t =>
                        {
                            t.HasComment("Productos");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.Proyecto", b =>
                {
                    b.Property<int>("IdProyecto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador del proyecto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProyecto"));

                    b.Property<int>("IdClienteP")
                        .HasColumnType("int")
                        .HasComment("identificador del cliente");

                    b.Property<int>("IdRspnsblP")
                        .HasColumnType("int")
                        .HasComment("identificador del responsable");

                    b.Property<string>("Pdetalle")
                        .HasMaxLength(800)
                        .IsUnicode(false)
                        .HasColumnType("varchar(800)")
                        .HasColumnName("PDetalle")
                        .HasComment("detalle del proyecto");

                    b.Property<DateTime?>("PfechaC")
                        .HasColumnType("date")
                        .HasColumnName("PFechaC")
                        .HasComment("fecha del cierre del proyecto");

                    b.Property<DateTime?>("PfechaP")
                        .HasColumnType("date")
                        .HasColumnName("PFechaP")
                        .HasComment("fecha programada");

                    b.Property<DateTime>("PfechaS")
                        .HasColumnType("date")
                        .HasColumnName("PFechaS")
                        .HasComment("fecha de la solicitud");

                    b.Property<DateTime?>("Pfechai")
                        .HasColumnType("date")
                        .HasColumnName("PFechai")
                        .HasComment("fecha de inicio del poyecto");

                    b.Property<bool>("PisEncue")
                        .HasColumnType("bit")
                        .HasColumnName("PIsEncue")
                        .HasComment("0:no se ha realizado la encuesta, 1: se realizo");

                    b.Property<string>("Pnombre")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("PNombre")
                        .HasComment("nombre del proyecto");

                    b.Property<double?>("Pnota")
                        .HasColumnType("float")
                        .HasColumnName("PNota")
                        .HasComment("nota de la encuesta");

                    b.HasKey("IdProyecto");

                    b.HasIndex("IdClienteP");

                    b.HasIndex("IdRspnsblP");

                    b.ToTable("Proyecto", "his", t =>
                        {
                            t.HasComment("Proyecto de Mejora Continua");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.ProyectoUsr", b =>
                {
                    b.Property<int>("IdProyecto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProyecto"));

                    b.Property<bool>("Pestado")
                        .HasColumnType("bit")
                        .HasColumnName("PEstado");

                    b.Property<string>("Pnombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PNombre");

                    b.HasKey("IdProyecto")
                        .HasName("PK_Proyecto_1");

                    b.ToTable("ProyectoUsr", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.Puesto", b =>
                {
                    b.Property<int>("IdPuesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPuesto"));

                    b.Property<string>("PuCodigo")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("PuDescri")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<bool?>("PuEstado")
                        .HasColumnType("bit");

                    b.HasKey("IdPuesto")
                        .HasName("PK__Puesto__ADAC6B9C1C93A40D");

                    b.ToTable("Puesto", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.RespP", b =>
                {
                    b.Property<int>("IdRespP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador de la respuesta del proyecto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRespP"));

                    b.Property<int>("IdPregP")
                        .HasColumnType("int")
                        .HasComment("identificador de la pregunta del proyecto");

                    b.Property<int>("IdProyecto")
                        .HasColumnType("int")
                        .HasComment("identificador del proyecto");

                    b.Property<double>("Rpcumpli")
                        .HasColumnType("float")
                        .HasColumnName("RPCumpli")
                        .HasComment("nota de la pregunta");

                    b.Property<string>("Rpobserv")
                        .HasMaxLength(800)
                        .IsUnicode(false)
                        .HasColumnType("varchar(800)")
                        .HasColumnName("RPObserv")
                        .HasComment("observacion de la pregunta");

                    b.HasKey("IdRespP");

                    b.HasIndex("IdPregP");

                    b.HasIndex("IdProyecto");

                    b.ToTable("RespP", null, t =>
                        {
                            t.HasComment("Respuesta de las preguntas por proyectos");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.RespoReu", b =>
                {
                    b.Property<int>("IdResReu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdResReu"));

                    b.Property<bool>("Rresta")
                        .HasColumnType("bit")
                        .HasColumnName("RREsta");

                    b.Property<string>("Rrnombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RRNombre");

                    b.HasKey("IdResReu");

                    b.ToTable("RespoReu", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.Resuman", b =>
                {
                    b.Property<int>("IdResumen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdResumen"));

                    b.Property<string>("AreaTra")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("IdTipSuple")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Rfecha")
                        .HasColumnType("datetime")
                        .HasColumnName("RFecha");

                    b.Property<string>("Rgrupo")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("RGrupo");

                    b.Property<bool?>("RisSplncia")
                        .HasColumnType("bit")
                        .HasColumnName("RIsSplncia");

                    b.Property<string>("Rplanta")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RPlanta");

                    b.Property<string>("Rpuesto")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RPuesto");

                    b.Property<string>("RsupFicha")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("RSupFicha");

                    b.Property<string>("Rsuplido")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("RSuplido");

                    b.Property<string>("RtraFicha")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("RTraFicha");

                    b.Property<string>("Rtrabajado")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("RTrabajado");

                    b.Property<string>("Rturno")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("RTurno");

                    b.HasKey("IdResumen")
                        .HasName("PK__Resumen__C15B26E506657487");

                    b.HasIndex("IdTipSuple");

                    b.ToTable("Resumen");
                });

            modelBuilder.Entity("TiempoPerdido.Models.ReuParM", b =>
                {
                    b.Property<int>("IdReuParM")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("identificador");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReuParM"));

                    b.Property<string>("Rparea")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("RPArea")
                        .HasComment("area en la que se realizo la parada planificada");

                    b.Property<int?>("RpasunSpa")
                        .HasColumnType("int")
                        .HasColumnName("RPAsunSPA")
                        .HasComment("asuntos tratados en el SPA");

                    b.Property<DateTime?>("RpfechaPar")
                        .HasColumnType("date")
                        .HasColumnName("RPFechaPar")
                        .HasComment("fecha de la parada planificada");

                    b.Property<DateTime?>("RpfechaReu")
                        .HasColumnType("date")
                        .HasColumnName("RPFechaReu")
                        .HasComment("fecha de la reunion");

                    b.Property<string>("Rpmaquina")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("RPMaquina")
                        .HasComment("maquina de la parada programada");

                    b.Property<int?>("RpnumAct")
                        .HasColumnType("int")
                        .HasColumnName("RPNumAct")
                        .HasComment("numero actividades de la parada");

                    b.Property<double?>("Rpporce")
                        .HasColumnType("float")
                        .HasColumnName("RPPorce")
                        .HasComment("Porcentaje de asistencia");

                    b.Property<double?>("RptiePar")
                        .HasColumnType("float")
                        .HasColumnName("RPTiePar")
                        .HasComment("tiempo de la parada planificada");

                    b.Property<string>("RptipReu")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("RPTipReu")
                        .HasComment("tipo de reunion");

                    b.HasKey("IdReuParM");

                    b.ToTable("ReuParM", null, t =>
                        {
                            t.HasComment("reuniones de paradas por mantenimiento");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.ReunionDium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AfectadoKsf")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Area")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Codigo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CodigoEquipo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Codigo_equipo");

                    b.Property<string>("Discrepancia")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Div")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Division")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("date");

                    b.Property<string>("Fecha2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("FechaTrab")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_trab");

                    b.Property<string>("FechaTrab1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Fecha_trab1");

                    b.Property<string>("OrdenTrabajo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PlanDeAccion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Plan_de_accion");

                    b.Property<string>("Produfin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Responsable")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Tiempo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ReunionDia");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Rol", b =>
                {
                    b.Property<int>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRol"));

                    b.Property<string>("Rdescri")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("RDescri");

                    b.Property<bool>("Restado")
                        .HasColumnType("bit")
                        .HasColumnName("REstado");

                    b.Property<string>("Rnombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RNombre");

                    b.HasKey("IdRol");

                    b.ToTable("Rol", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.RspnsblP", b =>
                {
                    b.Property<int>("IdRspnsblP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador del cliente del proyecto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRspnsblP"));

                    b.Property<bool>("Rpestatus")
                        .HasColumnType("bit")
                        .HasColumnName("RPEstatus")
                        .HasComment("estatus(0:inactivo,1:activo)");

                    b.Property<string>("Rpnombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("RPNombre")
                        .HasComment("nombre del responsable");

                    b.Property<string>("Rpusuario")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("RPUsuario");

                    b.HasKey("IdRspnsblP");

                    b.ToTable("RspnsblP", null, t =>
                        {
                            t.HasComment("Responsable del proyecto");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.TecniCa", b =>
                {
                    b.Property<int>("IdTecniCa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTecniCa"));

                    b.Property<bool>("Tcestado")
                        .HasColumnType("bit")
                        .HasColumnName("TCEstado");

                    b.Property<string>("Tcficha")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TCFicha");

                    b.Property<string>("Tcnom")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TCNom");

                    b.Property<string>("TcusuW")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TCUsuW");

                    b.HasKey("IdTecniCa");

                    b.ToTable("TecniCa", null, t =>
                        {
                            t.HasComment("tecnicos de calidad");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.TiPaPar", b =>
                {
                    b.Property<int>("IdTiPaPar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("identificador del TiPa_Par");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTiPaPar"));

                    b.Property<int>("IdParte")
                        .HasColumnType("int")
                        .HasComment("identifiacador de la parte");

                    b.Property<int>("IdTiParTp")
                        .HasColumnType("int")
                        .HasColumnName("IdTiParTP")
                        .HasComment("identificador de tipo de parada");

                    b.HasKey("IdTiPaPar");

                    b.HasIndex("IdParte");

                    b.HasIndex("IdTiParTp");

                    b.ToTable("TiPaPar", null, t =>
                        {
                            t.HasComment("intermediario entre el tipo de parada y la parte");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.TiParTp", b =>
                {
                    b.Property<int>("IdTiParTp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdTiParTP")
                        .HasComment("identificador");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTiParTp"));

                    b.Property<string>("Tpcodigo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TPCodigo")
                        .HasComment("codigo del tipo parada");

                    b.Property<bool>("Tpestado")
                        .HasColumnType("bit")
                        .HasColumnName("TPEstado")
                        .HasComment("0: Inactivo, 1:Activo");

                    b.Property<string>("Tpnombre")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TPNombre")
                        .HasComment("nombre del centro");

                    b.HasKey("IdTiParTp");

                    b.ToTable("TiParTP", null, t =>
                        {
                            t.HasComment("tipo de parada del tiempo perdido");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.TieEjeTp", b =>
                {
                    b.Property<int>("IdTieEjeTp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdTieEjeTP")
                        .HasComment("identificador del tiempo ejecutado de un turno");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTieEjeTp"));

                    b.Property<int>("IdParsiOee")
                        .HasColumnType("int")
                        .HasColumnName("IdParsiOEE")
                        .HasComment("identificador del turno");

                    b.Property<int?>("Tebueno")
                        .HasColumnType("int")
                        .HasColumnName("TEBueno")
                        .HasComment("cantidad de productos buenos");

                    b.Property<double?>("Teduracion")
                        .HasColumnType("float")
                        .HasColumnName("TEDuracion")
                        .HasComment("duracion del tiempo ejecutado");

                    b.Property<DateTime?>("Tefechaf")
                        .HasColumnType("datetime")
                        .HasColumnName("TEFechaf")
                        .HasComment("fecha final del tiempo ejecutado");

                    b.Property<DateTime>("Tefechai")
                        .HasColumnType("datetime")
                        .HasColumnName("TEFechai")
                        .HasComment("fecha de inicio del tiempo ejecutado");

                    b.Property<int?>("Temalo")
                        .HasColumnType("int")
                        .HasColumnName("TEMalo")
                        .HasComment("cantidad de productos malos");

                    b.Property<int?>("TenumVuelt")
                        .HasColumnType("int")
                        .HasColumnName("TENumVuelt");

                    b.Property<int?>("Teproducidos")
                        .HasColumnType("int")
                        .HasColumnName("TEProducidos");

                    b.Property<double?>("Tevelocidad")
                        .HasColumnType("float")
                        .HasColumnName("TEVelocidad")
                        .HasComment("velocidad promedio");

                    b.HasKey("IdTieEjeTp");

                    b.HasIndex("IdParsiOee");

                    b.ToTable("TieEjeTP", null, t =>
                        {
                            t.HasComment("tiempo ejecutado en el turno");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.TieParTp", b =>
                {
                    b.Property<int>("IdTieParTp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdTieParTP")
                        .HasComment("identificador del tiempo parado de un turno");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTieParTp"));

                    b.Property<int?>("IdCaLinAre")
                        .HasColumnType("int");

                    b.Property<int>("IdParaTp")
                        .HasColumnType("int")
                        .HasColumnName("IdParaTP")
                        .HasComment("identificador de la parada");

                    b.Property<int>("IdParsiOee")
                        .HasColumnType("int")
                        .HasColumnName("IdParsiOEE")
                        .HasComment("identificador del turno");

                    b.Property<double?>("Teduracion")
                        .HasColumnType("float")
                        .HasColumnName("TEDuracion")
                        .HasComment("duracion de la parada");

                    b.Property<DateTime?>("Tefechaf")
                        .HasColumnType("datetime")
                        .HasColumnName("TEFechaf")
                        .HasComment("fecha final de la parada");

                    b.Property<DateTime>("Tefechai")
                        .HasColumnType("datetime")
                        .HasColumnName("TEFechai")
                        .HasComment("fecha de inicio de la parada");

                    b.HasKey("IdTieParTp");

                    b.HasIndex("IdCaLinAre");

                    b.HasIndex("IdParaTp");

                    b.HasIndex("IdParsiOee");

                    b.ToTable("TieParTP", null, t =>
                        {
                            t.HasComment("tiempo parado en el turno");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.TipSuple", b =>
                {
                    b.Property<int>("IdTipSuple")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipSuple"));

                    b.Property<string>("Tscodigo")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("TSCodigo");

                    b.Property<string>("Tsdescri")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("TSDescri");

                    b.Property<bool?>("Tsestado")
                        .HasColumnType("bit")
                        .HasColumnName("TSEstado");

                    b.HasKey("IdTipSuple")
                        .HasName("PK__TipSuple__9ECDEC913F95291A");

                    b.ToTable("TipSuple", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.TurPro", b =>
                {
                    b.Property<int>("IdTurPro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("identificador de la Tur_Pro");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTurPro"));

                    b.Property<int>("IdProducto")
                        .HasColumnType("int")
                        .HasComment("identificador del producto");

                    b.Property<int>("IdTurnoTp")
                        .HasColumnType("int")
                        .HasColumnName("IdTurnoTP")
                        .HasComment("identificador del turno");

                    b.HasKey("IdTurPro");

                    b.HasIndex("IdProducto");

                    b.HasIndex("IdTurnoTp");

                    b.ToTable("TurPro", null, t =>
                        {
                            t.HasComment("intermediario entre turno del tiempo perdido y producto");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.TurnoTp", b =>
                {
                    b.Property<int>("IdTurnoTp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdTurnoTP")
                        .HasComment("identificador del turno");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTurnoTp"));

                    b.Property<int>("IdLinea")
                        .HasColumnType("int")
                        .HasComment("identificador de la linea");

                    b.Property<int>("IdOperador")
                        .HasColumnType("int")
                        .HasComment("identificador del operador");

                    b.Property<double?>("Tcalidad")
                        .HasColumnType("float")
                        .HasColumnName("TCalidad")
                        .HasComment("calidad del turno");

                    b.Property<double?>("Tdispo")
                        .HasColumnType("float")
                        .HasColumnName("TDispo")
                        .HasComment("disponibilidad del turno");

                    b.Property<DateTime?>("Tfecha")
                        .HasColumnType("datetime")
                        .HasColumnName("TFecha")
                        .HasComment("fecha del turno");

                    b.Property<double?>("Toee")
                        .HasColumnType("float")
                        .HasColumnName("TOEE")
                        .HasComment("OEE del turno");

                    b.Property<int?>("Tpbueno")
                        .HasColumnType("int")
                        .HasColumnName("TPBueno")
                        .HasComment("productos buenos del turno");

                    b.Property<double?>("Tperdido")
                        .HasColumnType("float")
                        .HasColumnName("TPerdido")
                        .HasComment("tiempo perdido del turno");

                    b.Property<int?>("Tpmalo")
                        .HasColumnType("int")
                        .HasColumnName("TPMalo")
                        .HasComment("productos malos del turno");

                    b.Property<double?>("Trendi")
                        .HasColumnType("float")
                        .HasColumnName("TRendi")
                        .HasComment("rendimiento del turno");

                    b.Property<double?>("Ttrabajado")
                        .HasColumnType("float")
                        .HasColumnName("TTrabajado")
                        .HasComment("tiempo trabajo del turno");

                    b.Property<string>("Tturno")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasComment("turno en curso");

                    b.Property<double?>("Tvelocidad")
                        .HasColumnType("float")
                        .HasColumnName("TVelocidad")
                        .HasComment("velocidad promedio del turno");

                    b.HasKey("IdTurnoTp");

                    b.HasIndex("IdLinea");

                    b.HasIndex("IdOperador");

                    b.ToTable("TurnoTP", null, t =>
                        {
                            t.HasComment("turnos de tiempo perdido");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador del usuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<string>("UsApellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UsClave")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("UsCorreo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("UsEstatus")
                        .HasColumnType("bit")
                        .HasComment("estatus(0:inactivo,1:activo)");

                    b.Property<string>("UsFicha")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UsNombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasComment("nombre del usuario");

                    b.Property<string>("UsPass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UsUsuario")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdUsuario");

                    b.ToTable("Usuario", null, t =>
                        {
                            t.HasComment("Responsable del proyecto");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.UsuariosPermiso", b =>
                {
                    b.Property<string>("Centro")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Division")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Proyecto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UsApellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UsFicha")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UsNombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("UsUsuario")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable((string)null);

                    b.ToView("Usuarios_Permisos", (string)null);
                });

            modelBuilder.Entity("TiempoPerdido.Models.VarAre", b =>
                {
                    b.Property<int>("IdVarAre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("identificador de la Var_Are");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVarAre"));

                    b.Property<int>("IdArea")
                        .HasColumnType("int")
                        .HasComment("identifiacador del area");

                    b.Property<int>("IdVarCa")
                        .HasColumnType("int")
                        .HasComment("identificador de la variable de calidad");

                    b.HasKey("IdVarAre");

                    b.HasIndex("IdArea");

                    b.HasIndex("IdVarCa");

                    b.ToTable("VarAre", null, t =>
                        {
                            t.HasComment("intermediario entre vareable de calidad y area");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.VarCa", b =>
                {
                    b.Property<int>("IdVarCa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("identificador de la variable de calidad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVarCa"));

                    b.Property<string>("Vcdetalle")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("VCDetalle")
                        .HasComment("Detalle de la variable");

                    b.Property<bool>("Vcestado")
                        .HasColumnType("bit")
                        .HasColumnName("VCEstado")
                        .HasComment("0: Inactivo, 1:Activo");

                    b.Property<bool>("Vcisobser")
                        .HasColumnType("bit")
                        .HasColumnName("VCIsobser")
                        .HasComment("0: no de tipo observable 1:es de tipo numerico");

                    b.Property<string>("Vcnom")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("VCNom")
                        .HasComment("nombre de la variable");

                    b.HasKey("IdVarCa");

                    b.ToTable("VarCa", null, t =>
                        {
                            t.HasComment("variable de calidad auditadas");
                        });
                });

            modelBuilder.Entity("TiempoPerdido.Models.AreaTra", b =>
                {
                    b.HasOne("TiempoPerdido.Models.Plantum", "IdPlantaNavigation")
                        .WithMany("AreaTras")
                        .HasForeignKey("IdPlanta")
                        .HasConstraintName("FK__AreaTra__IdPlant__5D2BD0E6");

                    b.Navigation("IdPlantaNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.AsisPm", b =>
                {
                    b.HasOne("TiempoPerdido.Models.CargoPm", "IdCargoPmNavigation")
                        .WithMany("AsisPms")
                        .HasForeignKey("IdCargoPm")
                        .IsRequired()
                        .HasConstraintName("FK_AsisPM_CargoPM");

                    b.HasOne("TiempoPerdido.Models.ReuParM", "IdReuParMNavigation")
                        .WithMany("AsisPms")
                        .HasForeignKey("IdReuParM")
                        .IsRequired()
                        .HasConstraintName("FK_AsisPM_ReuParM");

                    b.Navigation("IdCargoPmNavigation");

                    b.Navigation("IdReuParMNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.AsistenReu", b =>
                {
                    b.HasOne("TiempoPerdido.Models.CargoReu", "AridCargoRNavigation")
                        .WithMany("AsistenReus")
                        .HasForeignKey("AridCargoR")
                        .IsRequired()
                        .HasConstraintName("FK_AsistenReu_CargoReu");

                    b.Navigation("AridCargoRNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.AudCa", b =>
                {
                    b.HasOne("TiempoPerdido.Models.LinAre", "IdAreaNavigation")
                        .WithMany("AudCas")
                        .HasForeignKey("IdArea")
                        .IsRequired()
                        .HasConstraintName("FK_AudCa_LinAre");

                    b.HasOne("TiempoPerdido.Models.TecniCa", "IdTecniCaNavigation")
                        .WithMany("AudCas")
                        .HasForeignKey("IdTecniCa")
                        .IsRequired()
                        .HasConstraintName("FK_AudCa_TecniCa");

                    b.Navigation("IdAreaNavigation");

                    b.Navigation("IdTecniCaNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Centro", b =>
                {
                    b.HasOne("TiempoPerdido.Models.Empresa", "IdEmpresaNavigation")
                        .WithMany("Centros")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("FK_Centro_Empresa");

                    b.Navigation("IdEmpresaNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.DatAudCa", b =>
                {
                    b.HasOne("TiempoPerdido.Models.AudCa", "IdAudCaNavigation")
                        .WithMany("DatAudCas")
                        .HasForeignKey("IdAudCa")
                        .IsRequired()
                        .HasConstraintName("FK_DatAudCa_AudCa");

                    b.HasOne("TiempoPerdido.Models.VarCa", "IdVarCaNavigation")
                        .WithMany("DatAudCas")
                        .HasForeignKey("IdVarCa")
                        .IsRequired()
                        .HasConstraintName("FK_DatAudCa_VarCa");

                    b.Navigation("IdAudCaNavigation");

                    b.Navigation("IdVarCaNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Division", b =>
                {
                    b.HasOne("TiempoPerdido.Models.Centro", "IdCentroNavigation")
                        .WithMany("Divisions")
                        .HasForeignKey("IdCentro")
                        .HasConstraintName("FK_Division_Centro");

                    b.Navigation("IdCentroNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Empresa", b =>
                {
                    b.HasOne("TiempoPerdido.Models.Pai", "IdPaisNavigation")
                        .WithMany("Empresas")
                        .HasForeignKey("IdPais")
                        .IsRequired()
                        .HasConstraintName("FK_Empresa_Pais");

                    b.Navigation("IdPaisNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.LibroNove", b =>
                {
                    b.HasOne("TiempoPerdido.Models.Centro", "IdAreaCarNavigation")
                        .WithMany("LibroNoves")
                        .HasForeignKey("IdAreaCar")
                        .IsRequired()
                        .HasConstraintName("FK_LibroNove_Centro");

                    b.HasOne("TiempoPerdido.Models.ClasifiTpm", "IdCtpmNavigation")
                        .WithMany("LibroNoves")
                        .HasForeignKey("IdCtpm")
                        .HasConstraintName("FK_LibroNove_ClasifiTPM");

                    b.HasOne("TiempoPerdido.Models.Linea", "IdLineaNavigation")
                        .WithMany("LibroNoves")
                        .HasForeignKey("IdLinea")
                        .IsRequired()
                        .HasConstraintName("FK_LibroNove_Linea");

                    b.HasOne("TiempoPerdido.Models.TiParTp", "IdTipoNoveNavigation")
                        .WithMany("LibroNoves")
                        .HasForeignKey("IdTipoNove")
                        .IsRequired()
                        .HasConstraintName("FK_LibroNove_TiParTP");

                    b.Navigation("IdAreaCarNavigation");

                    b.Navigation("IdCtpmNavigation");

                    b.Navigation("IdLineaNavigation");

                    b.Navigation("IdTipoNoveNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.LinAre", b =>
                {
                    b.HasOne("TiempoPerdido.Models.Area", "IdAreaNavigation")
                        .WithMany("LinAres")
                        .HasForeignKey("IdArea")
                        .IsRequired()
                        .HasConstraintName("FK_LinAre_Area");

                    b.HasOne("TiempoPerdido.Models.Linea", "IdLineaNavigation")
                        .WithMany("LinAres")
                        .HasForeignKey("IdLinea")
                        .IsRequired()
                        .HasConstraintName("FK_LinAre_Linea");

                    b.Navigation("IdAreaNavigation");

                    b.Navigation("IdLineaNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.LinPro", b =>
                {
                    b.HasOne("TiempoPerdido.Models.Linea", "IdLineaNavigation")
                        .WithMany("LinPros")
                        .HasForeignKey("IdLinea")
                        .IsRequired()
                        .HasConstraintName("FK_LinPro_Linea");

                    b.HasOne("TiempoPerdido.Models.Producto", "IdProductoNavigation")
                        .WithMany("LinPros")
                        .HasForeignKey("IdProducto")
                        .IsRequired()
                        .HasConstraintName("FK_LinPro_Producto");

                    b.Navigation("IdLineaNavigation");

                    b.Navigation("IdProductoNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Linea", b =>
                {
                    b.HasOne("TiempoPerdido.Models.Centro", "IdCentroNavigation")
                        .WithMany("Lineas")
                        .HasForeignKey("IdCentro")
                        .IsRequired()
                        .HasConstraintName("FK_Linea_Centro");

                    b.HasOne("TiempoPerdido.Models.Division", "IdDivisionNavigation")
                        .WithMany("Lineas")
                        .HasForeignKey("IdDivision")
                        .HasConstraintName("FK_Linea_Division");

                    b.Navigation("IdCentroNavigation");

                    b.Navigation("IdDivisionNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Nivel", b =>
                {
                    b.HasOne("TiempoPerdido.Models.Division", "IdDivisionNavigation")
                        .WithMany("Nivels")
                        .HasForeignKey("IdDivision")
                        .HasConstraintName("FK_Nivel_Division");

                    b.HasOne("TiempoPerdido.Models.ProyectoUsr", "IdProyectoNavigation")
                        .WithMany("Nivels")
                        .HasForeignKey("IdProyecto")
                        .IsRequired()
                        .HasConstraintName("FK_Nivel_ProyectoUsr");

                    b.HasOne("TiempoPerdido.Models.Rol", "IdRolNavigation")
                        .WithMany("Nivels")
                        .HasForeignKey("IdRol")
                        .HasConstraintName("FK_Nivel_Rol");

                    b.HasOne("TiempoPerdido.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Nivels")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Nivel_Usuario");

                    b.Navigation("IdDivisionNavigation");

                    b.Navigation("IdProyectoNavigation");

                    b.Navigation("IdRolNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.ParAre", b =>
                {
                    b.HasOne("TiempoPerdido.Models.LinAre", "IdAreaNavigation")
                        .WithMany("ParAres")
                        .HasForeignKey("IdArea")
                        .IsRequired()
                        .HasConstraintName("FK_ParAre_LinAre");

                    b.HasOne("TiempoPerdido.Models.Parte", "IdParteNavigation")
                        .WithMany("ParAres")
                        .HasForeignKey("IdParte")
                        .IsRequired()
                        .HasConstraintName("FK_ParAre_Parte");

                    b.Navigation("IdAreaNavigation");

                    b.Navigation("IdParteNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.ParaTp", b =>
                {
                    b.HasOne("TiempoPerdido.Models.TiParTp", "IdTiParTpNavigation")
                        .WithMany("ParaTps")
                        .HasForeignKey("IdTiParTp")
                        .IsRequired()
                        .HasConstraintName("FK_ParaTP_TiParTP");

                    b.Navigation("IdTiParTpNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.ParsiOee", b =>
                {
                    b.HasOne("TiempoPerdido.Models.LinAre", "IdAreaNavigation")
                        .WithMany("ParsiOees")
                        .HasForeignKey("IdArea")
                        .IsRequired()
                        .HasConstraintName("FK_ParsiOEE_LinAre");

                    b.HasOne("TiempoPerdido.Models.TurnoTp", "IdTurnoTpNavigation")
                        .WithMany("ParsiOees")
                        .HasForeignKey("IdTurnoTp")
                        .IsRequired()
                        .HasConstraintName("FK_ParsiOEE_TurnoTP");

                    b.Navigation("IdAreaNavigation");

                    b.Navigation("IdTurnoTpNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Personal", b =>
                {
                    b.HasOne("TiempoPerdido.Models.AreaTra", "IdAreaTraNavigation")
                        .WithMany("Personals")
                        .HasForeignKey("IdAreaTra")
                        .HasConstraintName("FK__Personal__IdArea__5B438874");

                    b.HasOne("TiempoPerdido.Models.Puesto", "IdPuestoNavigation")
                        .WithMany("Personals")
                        .HasForeignKey("IdPuesto")
                        .HasConstraintName("FK__Personal__IdPues__5C37ACAD");

                    b.Navigation("IdAreaTraNavigation");

                    b.Navigation("IdPuestoNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Proyecto", b =>
                {
                    b.HasOne("TiempoPerdido.Models.ClienteP", "IdClientePNavigation")
                        .WithMany("Proyectos")
                        .HasForeignKey("IdClienteP")
                        .IsRequired()
                        .HasConstraintName("FK_Proyecto_ClienteP");

                    b.HasOne("TiempoPerdido.Models.RspnsblP", "IdRspnsblPNavigation")
                        .WithMany("Proyectos")
                        .HasForeignKey("IdRspnsblP")
                        .IsRequired()
                        .HasConstraintName("FK_Proyecto_RspnsblP");

                    b.Navigation("IdClientePNavigation");

                    b.Navigation("IdRspnsblPNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.RespP", b =>
                {
                    b.HasOne("TiempoPerdido.Models.PregP", "IdPregPNavigation")
                        .WithMany("RespPs")
                        .HasForeignKey("IdPregP")
                        .IsRequired()
                        .HasConstraintName("FK_RespP_PregP");

                    b.HasOne("TiempoPerdido.Models.Proyecto", "IdProyectoNavigation")
                        .WithMany("RespPs")
                        .HasForeignKey("IdProyecto")
                        .IsRequired()
                        .HasConstraintName("FK_RespP_Proyecto");

                    b.Navigation("IdPregPNavigation");

                    b.Navigation("IdProyectoNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Resuman", b =>
                {
                    b.HasOne("TiempoPerdido.Models.TipSuple", "IdTipSupleNavigation")
                        .WithMany("Resumen")
                        .HasForeignKey("IdTipSuple")
                        .HasConstraintName("FK__Resumen__IdTipSu__5E1FF51F");

                    b.Navigation("IdTipSupleNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.TiPaPar", b =>
                {
                    b.HasOne("TiempoPerdido.Models.Parte", "IdParteNavigation")
                        .WithMany("TiPaPars")
                        .HasForeignKey("IdParte")
                        .IsRequired()
                        .HasConstraintName("FK_TiPaPar_Parte");

                    b.HasOne("TiempoPerdido.Models.TiParTp", "IdTiParTpNavigation")
                        .WithMany("TiPaPars")
                        .HasForeignKey("IdTiParTp")
                        .IsRequired()
                        .HasConstraintName("FK_TiPaPar_TiParTP");

                    b.Navigation("IdParteNavigation");

                    b.Navigation("IdTiParTpNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.TieEjeTp", b =>
                {
                    b.HasOne("TiempoPerdido.Models.ParsiOee", "IdParsiOeeNavigation")
                        .WithMany("TieEjeTps")
                        .HasForeignKey("IdParsiOee")
                        .IsRequired()
                        .HasConstraintName("FK_TieEjeTP_ParsiOEE");

                    b.Navigation("IdParsiOeeNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.TieParTp", b =>
                {
                    b.HasOne("TiempoPerdido.Models.LinAre", "IdCaLinAreNavigation")
                        .WithMany("TieParTps")
                        .HasForeignKey("IdCaLinAre")
                        .HasConstraintName("FK_TieParTP_LinAre");

                    b.HasOne("TiempoPerdido.Models.ParaTp", "IdParaTpNavigation")
                        .WithMany("TieParTps")
                        .HasForeignKey("IdParaTp")
                        .IsRequired()
                        .HasConstraintName("FK_TieParTP_ParaTP");

                    b.HasOne("TiempoPerdido.Models.ParsiOee", "IdParsiOeeNavigation")
                        .WithMany("TieParTps")
                        .HasForeignKey("IdParsiOee")
                        .IsRequired()
                        .HasConstraintName("FK_TieParTP_ParsiOEE");

                    b.Navigation("IdCaLinAreNavigation");

                    b.Navigation("IdParaTpNavigation");

                    b.Navigation("IdParsiOeeNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.TurPro", b =>
                {
                    b.HasOne("TiempoPerdido.Models.Producto", "IdProductoNavigation")
                        .WithMany("TurPros")
                        .HasForeignKey("IdProducto")
                        .IsRequired()
                        .HasConstraintName("FK_TurPro_Producto");

                    b.HasOne("TiempoPerdido.Models.TurnoTp", "IdTurnoTpNavigation")
                        .WithMany("TurPros")
                        .HasForeignKey("IdTurnoTp")
                        .IsRequired()
                        .HasConstraintName("FK_TurPro_TurnoTP");

                    b.Navigation("IdProductoNavigation");

                    b.Navigation("IdTurnoTpNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.TurnoTp", b =>
                {
                    b.HasOne("TiempoPerdido.Models.Linea", "IdLineaNavigation")
                        .WithMany("TurnoTps")
                        .HasForeignKey("IdLinea")
                        .IsRequired()
                        .HasConstraintName("FK_TurnoTP_Linea");

                    b.HasOne("TiempoPerdido.Models.Operador", "IdOperadorNavigation")
                        .WithMany("TurnoTps")
                        .HasForeignKey("IdOperador")
                        .IsRequired()
                        .HasConstraintName("FK_TurnoTP_Operador");

                    b.Navigation("IdLineaNavigation");

                    b.Navigation("IdOperadorNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.VarAre", b =>
                {
                    b.HasOne("TiempoPerdido.Models.Area", "IdAreaNavigation")
                        .WithMany("VarAres")
                        .HasForeignKey("IdArea")
                        .IsRequired()
                        .HasConstraintName("FK_VarAre_Area");

                    b.HasOne("TiempoPerdido.Models.VarCa", "IdVarCaNavigation")
                        .WithMany("VarAres")
                        .HasForeignKey("IdVarCa")
                        .IsRequired()
                        .HasConstraintName("FK_VarAre_VarCa");

                    b.Navigation("IdAreaNavigation");

                    b.Navigation("IdVarCaNavigation");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Area", b =>
                {
                    b.Navigation("LinAres");

                    b.Navigation("VarAres");
                });

            modelBuilder.Entity("TiempoPerdido.Models.AreaTra", b =>
                {
                    b.Navigation("Personals");
                });

            modelBuilder.Entity("TiempoPerdido.Models.AudCa", b =>
                {
                    b.Navigation("DatAudCas");
                });

            modelBuilder.Entity("TiempoPerdido.Models.CargoPm", b =>
                {
                    b.Navigation("AsisPms");
                });

            modelBuilder.Entity("TiempoPerdido.Models.CargoReu", b =>
                {
                    b.Navigation("AsistenReus");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Centro", b =>
                {
                    b.Navigation("Divisions");

                    b.Navigation("LibroNoves");

                    b.Navigation("Lineas");
                });

            modelBuilder.Entity("TiempoPerdido.Models.ClasifiTpm", b =>
                {
                    b.Navigation("LibroNoves");
                });

            modelBuilder.Entity("TiempoPerdido.Models.ClienteP", b =>
                {
                    b.Navigation("Proyectos");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Division", b =>
                {
                    b.Navigation("Lineas");

                    b.Navigation("Nivels");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Empresa", b =>
                {
                    b.Navigation("Centros");
                });

            modelBuilder.Entity("TiempoPerdido.Models.LinAre", b =>
                {
                    b.Navigation("AudCas");

                    b.Navigation("ParAres");

                    b.Navigation("ParsiOees");

                    b.Navigation("TieParTps");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Linea", b =>
                {
                    b.Navigation("LibroNoves");

                    b.Navigation("LinAres");

                    b.Navigation("LinPros");

                    b.Navigation("TurnoTps");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Operador", b =>
                {
                    b.Navigation("TurnoTps");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Pai", b =>
                {
                    b.Navigation("Empresas");
                });

            modelBuilder.Entity("TiempoPerdido.Models.ParaTp", b =>
                {
                    b.Navigation("TieParTps");
                });

            modelBuilder.Entity("TiempoPerdido.Models.ParsiOee", b =>
                {
                    b.Navigation("TieEjeTps");

                    b.Navigation("TieParTps");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Parte", b =>
                {
                    b.Navigation("ParAres");

                    b.Navigation("TiPaPars");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Plantum", b =>
                {
                    b.Navigation("AreaTras");
                });

            modelBuilder.Entity("TiempoPerdido.Models.PregP", b =>
                {
                    b.Navigation("RespPs");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Producto", b =>
                {
                    b.Navigation("LinPros");

                    b.Navigation("TurPros");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Proyecto", b =>
                {
                    b.Navigation("RespPs");
                });

            modelBuilder.Entity("TiempoPerdido.Models.ProyectoUsr", b =>
                {
                    b.Navigation("Nivels");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Puesto", b =>
                {
                    b.Navigation("Personals");
                });

            modelBuilder.Entity("TiempoPerdido.Models.ReuParM", b =>
                {
                    b.Navigation("AsisPms");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Rol", b =>
                {
                    b.Navigation("Nivels");
                });

            modelBuilder.Entity("TiempoPerdido.Models.RspnsblP", b =>
                {
                    b.Navigation("Proyectos");
                });

            modelBuilder.Entity("TiempoPerdido.Models.TecniCa", b =>
                {
                    b.Navigation("AudCas");
                });

            modelBuilder.Entity("TiempoPerdido.Models.TiParTp", b =>
                {
                    b.Navigation("LibroNoves");

                    b.Navigation("ParaTps");

                    b.Navigation("TiPaPars");
                });

            modelBuilder.Entity("TiempoPerdido.Models.TipSuple", b =>
                {
                    b.Navigation("Resumen");
                });

            modelBuilder.Entity("TiempoPerdido.Models.TurnoTp", b =>
                {
                    b.Navigation("ParsiOees");

                    b.Navigation("TurPros");
                });

            modelBuilder.Entity("TiempoPerdido.Models.Usuario", b =>
                {
                    b.Navigation("Nivels");
                });

            modelBuilder.Entity("TiempoPerdido.Models.VarCa", b =>
                {
                    b.Navigation("DatAudCas");

                    b.Navigation("VarAres");
                });
#pragma warning restore 612, 618
        }
    }
}
